name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - production

jobs:
  deploy:
    runs-on: self-hosted # Change to self-hosted
    env:
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      ONBOARDING_VIDEO_URL: ${{ secrets.ONBOARDING_VIDEO_URL }}
      FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
      FIREBASE_PRIVATE_KEY_ID: ${{ secrets.FIREBASE_PRIVATE_KEY_ID }}
      FIREBASE_TYPE: ${{ secrets.FIREBASE_TYPE }}
      FIREBASE_CLIENT_ID: ${{ secrets.FIREBASE_CLIENT_ID }}
      FIREBASE_CLIENT_X509_CERT_URL: ${{ secrets.FIREBASE_CLIENT_X509_CERT_URL }}
      PORT: ${{ secrets.PORT }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
      EMAIL_USER: ${{ secrets.EMAIL_USER }}
      EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
      JWT_ACCESS_SECRET: ${{ secrets.JWT_ACCESS_SECRET }}
      JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      JWT_ACCESS_EXPIRES: ${{ secrets.JWT_ACCESS_EXPIRES }}
      JWT_REFRESH_EXPIRES: ${{ secrets.JWT_REFRESH_EXPIRES }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Build and start containers with commit hash
        shell: pwsh
        run: |
          $COMMIT_HASH = "${{ github.sha }}"

          # Stop old containers (ignore errors if none)
          try { docker compose down } catch { Write-Host "No containers running" }

          # Build backend with commit hash
          docker build -f docker/Dockerfile -t my-backend:$COMMIT_HASH -t my-backend:latest .

          # Pass environment variables to Docker Compose
          $env:FIREBASE_PROJECT_ID = "${{ secrets.FIREBASE_PROJECT_ID }}"
          $env:FIREBASE_CLIENT_EMAIL = "${{ secrets.FIREBASE_CLIENT_EMAIL }}"
          $env:FIREBASE_PRIVATE_KEY = "${{ secrets.FIREBASE_PRIVATE_KEY }}"
          $env:JWT_ACCESS_SECRET = "${{ secrets.JWT_ACCESS_SECRET }}"
          $env:JWT_REFRESH_SECRET = "${{ secrets.JWT_REFRESH_SECRET }}"
          $env:GOOGLE_API_KEY = "${{ secrets.GOOGLE_API_KEY }}"
          $env:JWT_ACCESS_EXPIRES = "${{ secrets.JWT_ACCESS_EXPIRES }}"
          $env:JWT_REFRESH_EXPIRES = "${{ secrets.JWT_REFRESH_EXPIRES }}"
          $env:EMAIL_USER = "${{ secrets.EMAIL_USER }}"
          $env:EMAIL_PASS = "${{ secrets.EMAIL_PASS }}"
          $env:GEMINI_API_KEY = "${{ secrets.GEMINI_API_KEY }}"
          $env:ONBOARDING_VIDEO_URL = "${{ secrets.ONBOARDING_VIDEO_URL }}"
          $env:AWS_ACCESS_KEY_ID = "${{ secrets.AWS_ACCESS_KEY_ID }}"
          $env:AWS_SECRET_ACCESS_KEY = "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          $env:AWS_REGION = "${{ secrets.AWS_REGION }}"
          $env:AWS_BUCKET_NAME = "${{ secrets.AWS_BUCKET_NAME }}"
          $env:PORT = "${{ secrets.PORT }}"
          $env:FIREBASE_TYPE = "${{ secrets.FIREBASE_TYPE }}"
          $env:FIREBASE_PRIVATE_KEY_ID = "${{ secrets.FIREBASE_PRIVATE_KEY_ID }}"
          $env:FIREBASE_CLIENT_ID = "${{ secrets.FIREBASE_CLIENT_ID }}"
          $env:FIREBASE_CLIENT_X509_CERT_URL = "${{ secrets.FIREBASE_CLIENT_X509_CERT_URL }}"
          $env:DB_HOST = "${{ secrets.DB_HOST }}"
          $env:DB_USER = "${{ secrets.DB_USER }}"
          $env:DB_PASSWORD = "${{ secrets.DB_PASSWORD }}"
          $env:DB_NAME = "${{ secrets.DB_NAME }}"
          $env:DATABASE_URL = "${{ secrets.DATABASE_URL }}"

          # Start new stack
          docker compose -f docker/docker-compose.yml up -d --force-recreate --build