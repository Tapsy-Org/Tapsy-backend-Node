version: '3.9'

services:
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      args:
        - DATABASE_URL=${DATABASE_URL}
    container_name: my-backend
    restart: always
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - JWT_ACCESS_EXPIRES=${JWT_ACCESS_EXPIRES}
      - JWT_REFRESH_EXPIRES=${JWT_REFRESH_EXPIRES}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - FIREBASE_TYPE=${FIREBASE_TYPE}
      - FIREBASE_PRIVATE_KEY_ID=${FIREBASE_PRIVATE_KEY_ID}
      - FIREBASE_CLIENT_ID=${FIREBASE_CLIENT_ID}
      - FIREBASE_CLIENT_X509_CERT_URL=${FIREBASE_CLIENT_X509_CERT_URL}
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT}
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      db:
        condition: service_healthy # Wait for the DB health check to pass
    # Run the database push and then start the application
    command: sh -c "npx prisma db push && npm start"

  db:
    image: postgres:16
    container_name: my-postgres
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck: # Add a health check to the database container
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  pgdata: