// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum UserType {
  INDIVIDUAL
  BUSINESS
  ADMIN
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
  DELETED
}

enum VerificationMethod {
  MOBILE
  EMAIL
}

enum LocationType {
  HOME
  WORK
  OTHER
}

enum VideoShareType {
  COPY_LINK
  DIRECT
  DM
}

enum ReviewRating {
  ONE
  TWO
  THREE
  FOUR
  FIVE
}

enum CategoryAudience {
  INDIVIDUAL
  BUSINESS
  BOTH
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELLED
  INACTIVE
}

// Tracks where an INDIVIDUAL user is in onboarding
enum OnboardingStep {
  REGISTERED
  CATEGORY
  LOCATION
  COMPLETED
}

enum PaymentMethod {
  STRIPE
  RAZORPAY
  CARD
  CASH
  OTHER
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MESSAGE
  MENTION
  SYSTEM
}
enum NotificationStatus {
  ACTIVE
  ARCHIVED
}

enum SupportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

// ---------- Core ----------
model User {
  // Both
  id                  String             @id @default(uuid()) @db.Uuid
  user_type           UserType
  mobile_number       String?            @unique
  username            String             @unique
  name                String?
  status              Status
  last_login          DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  firebase_token      String?
  otp_verified        Boolean            @default(false)
  verification_method VerificationMethod
  otp                 String?
  refresh_token       String?
  otp_expiry          DateTime?
  about               String?
  logo_url            String?
  video_url           String?
  onboarding_step     OnboardingStep?    @default(REGISTERED)

  // User Only

  // Business Only
  email               String?            @unique 
  website             String?
  rating_sum   Int    @default(0)
  review_count Int    @default(0)

  // Admin Only
  password            String?            // For admin users
  
  // Relations
  categories       UserCategory[]
  locations        Location[]
  reviews          Review[]        @relation("UserReviews")
  businessReviews  Review[]        @relation("BusinessReviews")
  likes            Like[]
  following        Follow[]        @relation("UserFollowing")
  followers        Follow[]        @relation("UserFollowers")
  messagesSent     Message[]       @relation("MessagesSent")
  messagesReceived Message[]       @relation("MessagesReceived")
  comments         Comment[]
  businessVideos   BusinessVideo[]
  receivedNotifications Notification[] @relation("UserNotifications")
  sentNotifications     Notification[] @relation("SenderNotifications")
  subscriptions    Subscription[]
  supportTickets   SupportTicket[]
  searches         RecentSearch[]

  @@index([user_type])
  @@index([status])
  @@index([name])
  @@index([createdAt])

  @@index([user_type, status])         // For combined filtering
  @@index([last_login(sort: Desc)])    // For sorting by recent activity
  @@index([otp_verified])              // For admin queries on verification
}

model Category {
  id         String           @id @default(uuid()) @db.Uuid
  name       String
  slug       String           @unique
  audience   CategoryAudience
  status     Status
  sort_order Int
  icon       String?  
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  users UserCategory[]

  @@index([name])
  @@index([audience])
  @@index([status, sort_order]) 
}

model UserCategory {
  id             String   @id @default(uuid()) @db.Uuid
  userId         String   @db.Uuid
  categoryId     String   @db.Uuid
  categoriesName String[]
  subcategories  String[]
  user_type      UserType
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@unique([userId, categoryId])
  @@index([userId])
  @@index([categoryId])
}

// ---------- Locations ----------
model Location {
  id            String       @id @default(uuid()) @db.Uuid
  userId        String       @db.Uuid
  address       String?
  zip_code      String?
  latitude      Float
  longitude     Float
  location      String
  location_type LocationType?
  city          String?
  state         String?
  country       String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([latitude, longitude])
  @@index([country, state, city])
  @@index([zip_code])
}


// ---------- Reviews / Videos ----------
model Review {
  id         String       @id @default(uuid()) @db.Uuid
  userId     String       @db.Uuid
  rating     ReviewRating
  badges     String?
  caption    String?
  hashtags   String[]
  title      String?
  video_url  String?
  businessId String?      @db.Uuid
  views      Int          @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  status     Status       @default(ACTIVE)
  
  feedback   ReviewFeedback?
  user       User      @relation("UserReviews", fields: [userId], references: [id])
  business User?     @relation("BusinessReviews", fields: [businessId], references: [id])
  likes    Like[]
  comments Comment[]

  @@index([userId])
  @@index([businessId])
  @@index([status])
}

model ReviewFeedback {
  id          String   @id @default(uuid()) @db.Uuid
  reviewId    String   @unique @db.Uuid
  feedback    String   
  is_resolved Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([reviewId])
  @@index([is_resolved])
}

model Like {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  reviewId  String   @db.Uuid
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  review Review @relation(fields: [reviewId], references: [id])

  @@unique([userId, reviewId])
  @@index([reviewId])
}

model Comment {
  id                String   @id @default(uuid()) @db.Uuid
  reviewId          String   @db.Uuid
  userId            String   @db.Uuid
  comment           String
  parent_comment_id String?  @db.Uuid
  createdAt         DateTime @default(now())
  status            Status   @default(ACTIVE)

  review  Review    @relation(fields: [reviewId], references: [id])
  user    User      @relation(fields: [userId], references: [id])
  parent  Comment?  @relation("CommentReplies", fields: [parent_comment_id], references: [id])
  replies Comment[] @relation("CommentReplies")

  @@index([userId])
  @@index([parent_comment_id])
  @@index([reviewId, createdAt(sort: Desc)])
}

// ---------- Social / Follows ----------
model Follow {
  id              String   @id @default(uuid()) @db.Uuid
  followerId      String   @db.Uuid
  followingUserId String   @db.Uuid
  createdAt       DateTime @default(now())

  follower  User @relation("UserFollowers", fields: [followerId], references: [id])
  following User @relation("UserFollowing", fields: [followingUserId], references: [id])

  @@unique([followerId, followingUserId])
  @@index([followingUserId])
}

// ---------- Messaging ----------
model Message {
  id          String   @id @default(uuid()) @db.Uuid
  senderId    String   @db.Uuid
  receiverId  String   @db.Uuid
  sender_type UserType
  text        String
  is_read     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      Status   @default(ACTIVE)

  sender   User @relation("MessagesSent", fields: [senderId], references: [id])
  receiver User @relation("MessagesReceived", fields: [receiverId], references: [id])

  @@index([senderId, receiverId, createdAt])
  @@index([receiverId, is_read])
}

// ---------- Business Media ----------
model BusinessVideo {
  id         String    @id @default(uuid()) @db.Uuid
  businessId String    @db.Uuid
  title      String
  caption    String?   // optional caption
  hashtags   String[]  // array of hashtags
  video_url  String
  status     Status    @default(ACTIVE)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
 
  business   User      @relation(fields: [businessId], references: [id])
 
  @@index([businessId, createdAt(sort: Desc)])
}

// ---------- Notifications ----------
model Notification {
  id        String             @id @default(uuid()) @db.Uuid
  userId    String             @db.Uuid
  senderId  String?            @db.Uuid
  type      NotificationType
  referenceId  String?            @db.Uuid         // likeId, commentId, followId, messageId, etc.
  title     String
  content   String
  image_url String?
  status    NotificationStatus
  is_read   Boolean            @default(false)
  createdAt DateTime           @default(now())

  user   User   @relation("UserNotifications", fields: [userId], references: [id])
  sender User?  @relation("SenderNotifications", fields: [senderId], references: [id])

  @@index([userId, is_read, createdAt(sort: Desc)])
  @@index([userId, type])
}

// ---------- Help & Support ----------
model SupportTicket {
  id          String        @id @default(uuid()) @db.Uuid
  userId      String?       @db.Uuid
  user_type   UserType
  title       String
  email       String
  description String
  status      SupportStatus
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user User? @relation(fields: [userId], references: [id])

  @@index([status, updatedAt(sort: Desc)])
  @@index([userId])
  @@index([email])
}

// ---------- Search ----------
model RecentSearch {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  status     Status
  searchText String
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, createdAt(sort: Desc)])
  @@index([userId, searchText])
}

// ---------- Settings ----------
model Setting {
  id        String   @id @default(uuid()) @db.Uuid
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
}

// ---------- Plans & Subscriptions ----------
model Plan {
  id              String       @id @default(uuid()) @db.Uuid
  name            String
  price           Int
  billingCycle    BillingCycle
  features        String[]
  limits          String[]
  status          Status
  sort_order      Int
  stripe_price_id String
  is_popular      Boolean      @default(false)
  trial_days      Int          @default(0)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  subscriptions Subscription[]

  @@index([status, sort_order])
}

model Subscription {
  id             String             @id @default(uuid()) @db.Uuid
  businessId     String             @db.Uuid
  planId         String             @db.Uuid
  status         SubscriptionStatus
  starts_at      DateTime
  ends_at        DateTime
  trial_ends_at  DateTime?
  cancelled_at   DateTime?
  payment_method PaymentMethod
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  business User @relation(fields: [businessId], references: [id])
  plan     Plan @relation(fields: [planId], references: [id])

  @@index([businessId, status])
  @@index([status])
  @@index([ends_at])
}

model QRCode {
  id         String   @id @default(uuid())
  name       String
  image_url  String
  status     Status
  createdAt  DateTime @default(now())

  @@index([status, createdAt(sort: Desc)])
  @@index([name])
}